set rtp+=~/.vim/bundle/Vundle.vim
call plug#begin('~/.vim/plugged')

" global search by ack
Plug('mileszs/ack.vim')
" Plug('jiangmiao/auto-pairs')
Plug('scrooloose/nerdtree')

" comments
Plug('tomtom/tcomment_vim')
" autocomplete
Plug('lifepillar/vim-mucomplete')
Plug('itchyny/lightline.vim')
Plug('tpope/vim-bundler')
Plug('vim-syntastic/syntastic')
Plug('tpope/vim-endwise')
Plug('airblade/vim-gitgutter')
Plug('tpope/vim-rails')
Plug('tpope/vim-rbenv')
Plug('vim-ruby/vim-ruby')
Plug('sunaku/vim-ruby-minitest')
Plug('tpope/vim-surround')
Plug('janko-m/vim-test')
Plug('christoomey/vim-tmux-navigator')
Plug('benmills/vimux')
Plug('hail2u/vim-css3-syntax')
Plug('tpope/vim-fugitive')
Plug('tmux-plugins/vim-tmux-focus-events')
Plug('kana/vim-textobj-user')
Plug('rhysd/vim-textobj-ruby')

" reslove git conflicts
Plug('christoomey/vim-conflicted')

" improved javscript syntax
Plug('pangloss/vim-javascript')

" jsx syntax support
Plug('mxw/vim-jsx')

" multiple cursors
Plug('terryma/vim-multiple-cursors')

" use local eslint config
Plug('mtscout6/syntastic-local-eslint.vim')

" base16 color schemes
Plug('chriskempson/base16-vim')

call plug#end()


" ===================== General settings ====================================

nnoremap <space> <nop>

" use the space key as our leader. put this near the top of your vimrc
let mapleader = "\<space>"

" r For auto indent filetype plugin indent on

"filetype off
"syntax highlighting
syntax on

" Use vim, not vi api
set nocompatible

" No backup files
set nobackup

" No write backup
set nowritebackup

" No swap file
set noswapfile

" Command history
set history=500

" Remove escape delay http://www.johnhawthorn.com/2012/09/vi-escape-delays/
set timeoutlen=1000 ttimeoutlen=0

" Always show cursor
set ruler

" Show incomplete commands
set showcmd

" Incremental searching (search as you type)
set incsearch

" Highlight search matches
set hlsearch

" Ignore case in search if term(s) are lowercase
set ignorecase

" Search with case sensitivity if term(s) are upper or mixed case
set smartcase

" Turn word wrap off
set nowrap

set autoindent

set smartindent

" Performance
syntax sync maxlines=256
set synmaxcol=120

" Auto remove trailing blank spaces on each save
autocmd BufWritePre * :%s/\s\+$//e

" Allow backspace to delete end of line, indent and start of line characters
set backspace=indent,eol,start

set background=dark

" colorscheme base16-onedark
" colorscheme gruvbox
" colorscheme neodark
" colorscheme seoul256
"
" Base16 hook
if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
endif

" Access colors present in 256 colorspace
let base16colorspace=256
set t_Co=256

set termguicolors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
"
" Always show statusline
set laststatus=2

" Always display the tabline, even if there is only one tab
" set showtabline=2

" Hide the default mode text (e.g. -- INSERT -- below the statusline)
set noshowmode

" Enable mouse
set mouse=a

" set number of lines
set nu!

" tabs settinngs
set ts=2
set sts=0
set sw=2

" Tabs settins
" Convert tabs to spaces, all file types
set expandtab

" Set tab size in spaces (this is for manual indenting)
set tabstop=2

" The number of spaces inserted for a tab (used for auto indenting)
set shiftwidth=2

" Turn on line numbers
set number

" UTF encoding
set encoding=utf-8

set spelllang=en

" Autoload files that have changed outside of vim
set autoread

" Better splits (new windows appear below and to the right)
set splitbelow
set splitright

" Ensure Vim doesn't beep at you every time you make a mistype
set visualbell

" Visual autocomplete for command menu (e.g. :e ~/path/to/file)
set wildmenu

" Automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" Redraw only when we need to (i.e. don't redraw when executing a macro)
set lazyredraw

" Highlight a matching [{()}?P] when cursor is placed on start/end character
set showmatch

" Complete files like a shell.
set wildmode=list:longest

" Show 3 lines of context around the cursor.
set scrolloff=3

" Set the terminal's title
set title

set clipboard+=unnamed


" ===================== Mapings ====================================

" Remap VIM 0 to first non-blank character
map 0 ^

" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Save current file
nnoremap <Leader>w :w<CR>

" Go to the begining of line
noremap H ^

" Go to the end of line
noremap L $

" Run 'git blame' on a selection of code
nmap <leader>gb :Gblame<CR>

" Run 'git status' for current file
nmap <leader>gs :Gstatus<CR>

" Change surround double quotes to plain quotes
nmap <Leader>' cs"'<CR>

" Map text align to tab button in visual mode
vnoremap <TAB> =

" Expand word to tag
nmap <F4> byei<<ESC>ea></<C-R>0><ESC>bba

" Faster search
nmap q /

" Fix indenting selection
vnoremap < <gv
vnoremap > >gv

" Open a new tab with Ctrl+T
map <C-t> <esc>:tabnew<CR>

" For indenting code
map <leader>i mmgg=G`m<CR>

" Disable selection
map <leader>n :nohl<CR>

" Enter replace command
map <leader>r :%s/

" Reload servers
map t :call RestartServers() <CR>

" Move up and down by visible lines if current line is wrapped
nmap j gj
nmap k gk

" zoom a vim pane, <C-w>= to re-balance
" nmap <C-w><cr> <C-W>\| <C-W>_

" Expand window
nmap " <C-W>\| <C-W>_

" re-balance panes
nmap ' <C-W>=

" Faster close windows and quit
nnoremap <C-c> <C-w>q

"Open ruby test in tmux pane
let test#strategy = "vimux"

" Test runner mappings
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>j :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>a :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>

"Go to test file
nmap t :A<CR>

" Go to associated file
nmap <Leader>e :R<CR>

" Tcomment
vmap \ :TComment<CR>
nnoremap \ :TComment<CR>

" fzf
set rtp+=~/.fzf

" Fuzzy-find with fzf
nmap <C-p> :FZ<cr>

" Ack (the_silver_searcher / ag)
let g:ackprg="ag"

" Ack mappings
nnoremap ! :Ack<SPACE>
" noremap ! :Ack <cr>

" Ack: To go to the next search result
map <leader>] :cn<cr>
" Ack: To go to the previous search results
map <leader>[ :cp<cr>

" fzf Ag
noremap <Leader>p :Ag <cr>
noremap <Leader>m :FZF app/models<CR>
nnoremap <silent> <Leader>f :Ag <C-R><C-W><CR>

" vim-jsx
" By default, JSX syntax highlighting and indenting will be enabled only for
" files with the .jsx extension. If you would like JSX in .js files, add
let g:jsx_ext_required = 0

" Unmap GitGutter leaders that I don't use. This avoids delays for other leaders.
autocmd VimEnter * nunmap <leader>hp
autocmd VimEnter * nunmap <leader>hr
autocmd VimEnter * nunmap <leader>hs

" Unmap Bufexplorer leaders that I don't use. This avoids delays for other leaders.
" autocmd VimEnter * nunmap <leader>bs
" autocmd VimEnter * nunmap <leader>bv
"

" ===================== Fugitive settings ====================================
" Froce to split window verticaly when fugitive opens git diff
set diffopt+=vertical

" ===================== Nerdtree settings  ====================================

let NERDTreeShowHidden=1
let NERDTreeWinSize=40
nnoremap <C-\> <NOP>
autocmd VimEnter * nnoremap <C-\> :NERDTreeToggle<CR>


" ===================== Syntastic settings  ====================================

let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_error_symbol = '✗✗'
let g:syntastic_style_error_symbol = '✠✠'
let g:syntastic_warning_symbol = '∆∆'
let g:syntastic_style_warning_symbol = '≈≈'
let g:syntastic_ruby_checkers=["mri", "rubocop"]


" ===================== Lightline settings  ====================================

let g:lightline = {
      \ 'colorscheme': 'one',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             ['gitbranch', 'filename', 'modified'] ],
      \   'right': [['total_lines']],
      \ },
      \ 'inactive': {
      \   'left': [['filename'] ],
      \   'right': [['total_lines']],
      \ },
      \ 'component_function': {
      \   'gitbranch': 'fugitive#head'
      \ },
      \ 'component': {
      \   'total_lines': ' %l/%L '
      \ },
      \}

" set statusline=
" set statusline+=%#PmenuSel#
" set statusline+=%{StatuslineGit()}
" set statusline+=%#LineNr#
" set statusline+=\ %f
" set statusline+=%m
" set statusline+=%=
" set statusline+=\ %l/
" set statusline+=%L

"====================== my own functions ====================================
function RestartServers()
  echom system("tmux send-keys -t 2.left C-c \" bundle exec rails s\" C-m")
  echom system("tmux send-keys -t 3.left C-c \" bundle exec rails s -p 3001\" C-m")
endfunction

" ===================== vim-jsx ====================================
let g:vim_jsx_pretty_colorful_config = 1 " default 0

" ===================== FZF-AG functions  ====================================

function! s:ag_to_qf(line)
  let parts = split(a:line, ':')
  return {'filename': parts[0], 'lnum': parts[1], 'col': parts[2],
        \ 'text': join(parts[3:], ':')}
endfunction

function! s:ag_handler(lines)
  if len(a:lines) < 2 | return | endif

  let cmd = get({'ctrl-x': 'split',
               \ 'ctrl-v': 'vertical split',
               \ 'ctrl-t': 'tabe'}, a:lines[0], 'e')
  let list = map(a:lines[1:], 's:ag_to_qf(v:val)')

  let first = list[0]
  execute cmd escape(first.filename, ' %#\')
  execute first.lnum
  execute 'normal!' first.col.'|zz'

  if len(list) > 1
    call setqflist(list)
    copen
    wincmd p
  endif
endfunction

command! -nargs=* Ag call fzf#run({
\ 'source':  printf('ag --nogroup --column --color "%s"',
\                   escape(empty(<q-args>) ? '^(?=.)' : <q-args>, '"\')),
\ 'sink*':    function('<sid>ag_handler'),
\ 'options': '--ansi --expect=ctrl-t,ctrl-v,ctrl-x --delimiter : --nth 4.. '.
\            '--multi --bind=ctrl-a:select-all,ctrl-d:deselect-all '.
\            '--color hl:68,hl+:110',
\ 'down':    '50%'
\ })
